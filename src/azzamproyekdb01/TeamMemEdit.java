/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package azzamproyekdb01;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Guest Prodas
 */
public class TeamMemEdit extends javax.swing.JFrame {

    /**
     * Creates new form TeamMemEdit
     */
    public TeamMemEdit() {
        initComponents();
        try{
            loadMemberIntoComboBoxes();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, "Gagal memuat anggota tim untuk dihapus: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private long team_id;
    TeamMemAdmin teamMem=new TeamMemAdmin();
    TeamMemberInterface teamInter=new TeamMemberInterface();
    
    public TeamMemEdit(long team_id){
        this.team_id=team_id;
        initComponents();
        try{
            loadMemberIntoComboBoxes();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, "Gagal memuat anggota tim untuk dihapus: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbAddMem = new javax.swing.JComboBox<>();
        cbDeleteMem = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Ubah Data Anggota Tim");

        jLabel2.setText("Tambahkan Anggota Tim Di Sini");

        jLabel3.setText("Hapus Anggota Tim Di Sini");

        cbAddMem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbAddMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAddMemActionPerformed(evt);
            }
        });

        cbDeleteMem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAdd.setForeground(new java.awt.Color(0, 204, 51));
        btnAdd.setText("+ Tambah");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setForeground(new java.awt.Color(255, 0, 0));
        btnDelete.setText("- Hapus");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReturn.setText("< Kembali");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(jLabel1)
                        .addGap(0, 116, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cbAddMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbDeleteMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReturn)
                        .addGap(131, 131, 131)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAddMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDeleteMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete)
                    .addComponent(btnReturn))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        TeamMemEdit.this.setVisible(false);
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        String addedMember = cbAddMem.getSelectedItem().toString();
    System.out.println("Selected member: " + addedMember); // Debugging

    try {
        Long employee_id = getMemberIdByName(addedMember);
        System.out.println("Obtained employee ID: " + employee_id); // Debugging

        if (employee_id != null) {
            teamMem.addMember(team_id, employee_id);
            loadMemberIntoComboBoxes();
            teamInter.loadTeamMembers();
            JOptionPane.showMessageDialog(this, "Anggota berhasil ditambahkan!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "ID Karyawan tidak valid!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Gagal memuat anggota tim untuk ditambah: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        String deletedMember=cbDeleteMem.getSelectedItem().toString();
        
        try{
            Long employee_id=getMemberIdByName(deletedMember);
            
            if(employee_id!=null){
                teamMem.deleteMember(team_id, employee_id);
                loadMemberIntoComboBoxes();
                teamInter.loadTeamMembers();
                JOptionPane.showMessageDialog(this, "Anggota berhasil dihapus!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(this, "ID Karyawan tidak valid!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, "Gagal memuat anggota tim untuk dihapus: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cbAddMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAddMemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbAddMemActionPerformed

    public Long getMemberIdByName(String memberName) throws SQLException {
        // Ambil nama karyawan dari memberName dengan format "Nama (ID: 10002)"
        String employeeName = memberName.substring(0, memberName.indexOf(" (ID:"));
    
        Connection conn = DBConnection.getConnection();
        String query = "SELECT employee_id FROM EmployeeList WHERE name = ?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, employeeName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getLong("employee_id");
                } else {
                    throw new SQLException("Karyawan tidak ditemukan!");
                }
            }
        }
    }

    
    public Long getTeamIdByName(String teamName) throws SQLException {
        Connection conn = DBConnection.getConnection();
        String query = "SELECT team_id FROM TeamList WHERE team_name = ?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, teamName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getLong("team_id");
                } else {
                    throw new SQLException("Tim tidak ditemukan!");
                }
            }
        }
    }
    
    void loadMemberIntoComboBoxes() throws SQLException {
    cbAddMem.removeAllItems();
    cbDeleteMem.removeAllItems();

    String sql = "SELECT e.name, e.employee_id "
               + "FROM EmployeeList e "
               + "WHERE e.employee_id NOT IN "
               + "(SELECT employee_id FROM TeamMemberList)";
    try (Connection conn = DBConnection.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {
        while (rs.next()) {
            Long employee_id = rs.getLong("employee_id");
            String employee_name = rs.getString("name");
            cbAddMem.addItem(employee_name + " (ID: " + employee_id + ")");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Gagal memuat anggota tim: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    // SQL untuk mengambil karyawan yang ada dalam tim tertentu
    String delSql = "SELECT e.name, e.employee_id "
                  + "FROM EmployeeList e "
                  + "JOIN TeamMemberList tm ON e.employee_id = tm.employee_id "
                  + "WHERE tm.team_id = ?";
    try (Connection conn = DBConnection.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(delSql)) {
        pstmt.setLong(1, team_id);  // Pastikan team_id sudah diatur sebelumnya
        ResultSet rs = pstmt.executeQuery();
        while (rs.next()) {
            Long employee_id = rs.getLong("employee_id");
            String employee_name = rs.getString("name");
            cbDeleteMem.addItem(employee_name + " (ID: " + employee_id + ")");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Gagal memuat anggota tim: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeamMemEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeamMemEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeamMemEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeamMemEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeamMemEdit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReturn;
    private javax.swing.JComboBox<String> cbAddMem;
    private javax.swing.JComboBox<String> cbDeleteMem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
