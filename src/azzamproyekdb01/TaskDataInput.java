/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package azzamproyekdb01;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;


/**
 *
 * @author Guest OSN
 */
public class TaskDataInput extends javax.swing.JFrame {

    /**
     * Creates new form TaskDataInput
     */
    public TaskDataInput() {
        initComponents();
        loadComboBoxes();
    }

    TaskAdmin taskAdm=new TaskAdmin();
    TaskTableInterface taskTbl=new TaskTableInterface();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTaskId = new javax.swing.JTextField();
        txtTaskName = new javax.swing.JTextField();
        cbTaskStatus = new javax.swing.JComboBox<>();
        cbAssignedTo = new javax.swing.JComboBox<>();
        cbAssignedBy = new javax.swing.JComboBox<>();
        cbMonth = new javax.swing.JComboBox<>();
        cbYear = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnToEdit = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Tambah Data Tugas Di Sini");

        cbTaskStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sedang Dikerjakan", "Telah Diselesaikan" }));

        cbAssignedTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbAssignedBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        cbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024" }));

        jLabel2.setText("ID Tugas");

        jLabel3.setText("Nama Tugas");

        jLabel4.setText("Status Tugas");

        jLabel5.setText("Ditugaskan ke");

        jLabel6.setText("Ditugaskan oleh");

        jLabel7.setText("Tenggat");

        btnAdd.setText("Tambahkan");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnToEdit.setText("Ubah");
        btnToEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToEditActionPerformed(evt);
            }
        });

        btnReturn.setText("Kembali");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbTaskStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAssignedTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAssignedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtTaskId, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addComponent(txtTaskName))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnReturn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnToEdit)
                .addGap(18, 18, 18)
                .addComponent(btnAdd)
                .addGap(38, 38, 38))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(195, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(162, 162, 162))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTaskId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTaskName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTaskStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAssignedTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAssignedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnToEdit)
                    .addComponent(btnReturn))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        TaskDataInput.this.setVisible(false);
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnToEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToEditActionPerformed
        // TODO add your handling code here:
        TaskDataEditor taskEdit=new TaskDataEditor();
        taskEdit.setVisible(true);
        TaskDataInput.this.setVisible(false);
    }//GEN-LAST:event_btnToEditActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String taskId = txtTaskId.getText();
    String task_name = txtTaskName.getText();
    String task_status = cbTaskStatus.getSelectedItem().toString();
    String assignedTo = cbAssignedTo.getSelectedItem().toString();
    String assignedBy = cbAssignedBy.getSelectedItem().toString();
    String day = txtDate.getText();
    String month = cbMonth.getSelectedItem().toString();
    String year = cbYear.getSelectedItem().toString();
    
    if (taskId.isEmpty() || task_name.isEmpty() || task_status.isEmpty() ||
        assignedTo.isEmpty() || assignedBy.isEmpty() || day.isEmpty() ||
        month.isEmpty() || year.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Isi semua bagian dengan baik!", "Tidak Bisa Memasukkan Data", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    try {
        long task_id = Long.parseLong(taskId);
        long assigned_to = getTeamIdByName(assignedTo.split(" \\(ID: ")[0]);  // Ambil nama tim
        long assigned_by = getEmployeeIdByName(assignedBy.split(" \\(ID: ")[0]);  // Ambil nama manajer
        
        String Deadline = day + "/" + month + "/" + year;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Date utilDeadline = sdf.parse(Deadline);
        
        java.sql.Date deadline = new java.sql.Date(utilDeadline.getTime());
        
        // Debugging print
        System.out.println("Task ID: " + task_id);
        System.out.println("Task Name: " + task_name);
        System.out.println("Status: " + task_status);
        System.out.println("Assigned To (Team ID): " + assigned_to);
        System.out.println("Assigned By (Manager ID): " + assigned_by);
        System.out.println("Deadline: " + deadline);

        // Memanggil metode untuk menambahkan tugas
        taskAdm.setNewTask(task_id, task_name, task_status, assigned_to, assigned_by, deadline);
        taskTbl.loadTasks();
        JOptionPane.showMessageDialog(this, "Tugas berhasil ditambahkan!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Task ID dan tanggal harus berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (ParseException ex) {
        JOptionPane.showMessageDialog(this, "Format tanggal salah! Pastikan tanggal benar.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error saat menambahkan tugas: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan tak terduga: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnAddActionPerformed

    // Method untuk memuat karyawan ke dalam combo box
    private void loadComboBoxes() {
        cbAssignedBy.removeAllItems();
        cbAssignedTo.removeAllItems();

        String sql = "SELECT m.manager_id, e.name "
                + "FROM ManagerList m JOIN EmployeeList e ON "
                + "m.employee_id=e.employee_id";
        
        try (Connection conn = DBConnection.getConnection();
            PreparedStatement pstmt = conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                Long employeeId = rs.getLong("manager_id");
                String employeeName = rs.getString("name");

                // Menambahkan ke combo box
                cbAssignedBy.addItem(employeeName + " (ID: " + employeeId + ")");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data karyawan: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
            String query = "SELECT team_id, team_name FROM TeamList";
            try (Connection conn = DBConnection.getConnection();
            PreparedStatement pstmt = conn.prepareStatement(query);
            ResultSet rs = pstmt.executeQuery()) {
        
            while (rs.next()) {
                Long teamId = rs.getLong("team_id");
                String teamName = rs.getString("team_name");
                cbAssignedTo.addItem(teamName + " (ID: " + teamId + ")"); // Tambahkan tim ke combo box
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal memuat tim: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Update saat data tim/manajer berubah
    public void updateEmployeeComboBoxes() {
        loadComboBoxes(); // Memuat ulang karyawan ke dalam combo box
    }

    
    private Long getEmployeeIdByName(String name) {
        Long managerId = null;
    String sql = "SELECT m.manager_id FROM ManagerList m " +
                 "JOIN EmployeeList e ON m.employee_id = e.employee_id " +
                 "WHERE e.name = ?";

    try (Connection conn = DBConnection.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {
        pstmt.setString(1, name);
        try (ResultSet rs = pstmt.executeQuery()) {
            if (rs.next()) {
                managerId = rs.getLong("manager_id");
            } else {
                System.out.println("Manager tidak ditemukan: " + name);
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error saat mendapatkan ID manajer: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    return managerId;
    }

    
    private Long getTeamIdByName(String teamName) {
    Long teamId = null;
    String query = "SELECT team_id FROM TeamList WHERE team_name = ?";

    try (Connection conn = DBConnection.getConnection();
         PreparedStatement pstmt = conn.prepareStatement(query)) {
        pstmt.setString(1, teamName);
        ResultSet rs = pstmt.executeQuery();

        if (rs.next()) {
            teamId = rs.getLong("team_id");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error saat mendapatkan ID tim: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    return teamId;
}
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskDataInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskDataInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskDataInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskDataInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskDataInput().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnToEdit;
    private javax.swing.JComboBox<String> cbAssignedBy;
    private javax.swing.JComboBox<String> cbAssignedTo;
    private javax.swing.JComboBox<String> cbMonth;
    private javax.swing.JComboBox<String> cbTaskStatus;
    private javax.swing.JComboBox<String> cbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtTaskId;
    private javax.swing.JTextField txtTaskName;
    // End of variables declaration//GEN-END:variables
}
